{"ast":null,"code":"let token;\nlet expiration;\nconst clientID = '636dfc0f06d648c1bebf682b8b2a50a5';\nconst redirectURL = 'http://localhost:3000/';\nconst spotify = {\n  getAccesToken() {\n    if (token) return token;\n\n    if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      token = window.location.href.match(/access_token=([^&]*)/);\n      token = token[1];\n      expiration = window.location.href.match(/expires_in=([^&]*)/);\n      expiration = Number(expiration[1]);\n      window.setTimeout(() => token = '', expiration * 1000);\n      window.history.pushState('Acces Token', null, '/');\n      return token;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n    }\n  },\n\n  search(term) {\n    const accesToken = spotify.getAccesToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accesToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(playlistName, trackURIsArray) {\n    if (!playlistName && !trackURIsArray) return;\n    const accesToken = token;\n    const headers = {\n      Authorization: `Bearer ${accesToken}`\n    };\n    const method = {\n      method: 'POST'\n    };\n    const body = {\n      name: playlistName\n    };\n    let userID;\n    fetch(`https://api.spotify.com/v1/me`, {\n      headers\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      return jsonResponse.id;\n    }).then(jsonResponseId => {\n      userID = jsonResponseId;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        headers,\n        method,\n        body\n      });\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      console.log(jsonResponse);\n    });\n  }\n\n};\nexport default spotify;","map":{"version":3,"names":["token","expiration","clientID","redirectURL","spotify","getAccesToken","window","location","href","match","Number","setTimeout","history","pushState","search","term","accesToken","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIsArray","method","body","userID","jsonResponseId","console","log"],"sources":["/home/sucolova/Documents/projects/jamming/src/util/Spotify.js"],"sourcesContent":["let token;\nlet expiration;\nconst clientID = '636dfc0f06d648c1bebf682b8b2a50a5';\nconst redirectURL = 'http://localhost:3000/';\n\nconst spotify = {\n  getAccesToken() {\n    if (token) return token;\n    if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      token = window.location.href.match(/access_token=([^&]*)/);\n      token = token[1];\n      expiration = window.location.href.match(/expires_in=([^&]*)/);\n      expiration = Number(expiration[1]);\n      window.setTimeout(() => token = '', expiration * 1000);\n      window.history.pushState('Acces Token', null, '/');\n      return token;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n    }\n  },\n\n  search(term) {\n    const accesToken = spotify.getAccesToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accesToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    })\n\n  },\n\n  savePlaylist(playlistName, trackURIsArray) {\n    if(!playlistName && !trackURIsArray) return; \n    const accesToken = token;\n    const headers = {\n      Authorization: `Bearer ${accesToken}`\n    };\n    const method = {\n      method: 'POST' \n    };\n    const body = {\n      name: playlistName\n    };\n    let userID; \n      fetch(`https://api.spotify.com/v1/me`, {headers}).then( response => {\n      return response.json();\n    }).then(jsonResponse => {\n      return jsonResponse.id;\n    }).then(jsonResponseId => {\n      userID = jsonResponseId;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {headers, method, body})\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      console.log(jsonResponse);\n    })\n  }\n};\n\n\nexport default spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}